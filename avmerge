#!/usr/bin/perl
use warnings;
use strict;
use BE::Dir;
use BE::Filter;
use BE::GenRE;

my $noop = 0;
my $keepfiles = 0;

sub deleteFromArray_eq(\@$) {
	my ($a, $needle);
	for (my $i=0; $i < @$a; $i++) {
		if ($a->[$i] eq $needle) {
			splice(@$a, $i, 1);
			last;
}	}	}

sub add_prefix_n($@) {
	my $prefix = shift;
	return "".join("", map {"$prefix$_\n"} @_);
}

my $newline = ""; # not print newline before first file
for my $f (@ARGV) {
	if ($f eq "-n") {
		$noop = 1;
		next;
	}
	if ($f eq "-k") {
		$keepfiles = 1;
		next;
	}
	print $newline;
	$newline = "\n"; # actually print nnewline on second to last file
	my ($fb, $fe) = ($f =~ /(.*)\.([^.]+)/);
	if (!defined $fe) {
		$fb = $f;
		$fe = undef;
	}

	my $dirname = dirname($f);
	my $direntries = get_direntries($dirname);
	$f =~ s,^.*/,,;

	my (@fv, @fa, @fs, @fu, @fc, %unlink, %notunlink);
	my ($rev, $rea, $res, $reu, $rec) = (
		ListToRE(qw(m4v webmv mp4v ts)),
		ListToRE(qw(m4a aac webma opus webm)),
		qr,\Q$fb\E(.*)\.srt$,, # Subtitles
		ListToRE(qw(mp4 webm)),
		qr,\Q$fb\E(.*)\.chapters$,, # Subtitles
	);
	$rev = qr,^\Q$fb\E(.*)\.$rev$,; # Video
	$rea = qr,^\Q$fb\E(.*)\.$rea$,; # Audio
	$reu = qr,^\Q$fb\E(.*)\.$reu$,; # Unknown
	
	list_filter_re_arr(@$direntries,
		$rev => \@fv,
		$rea => \@fa,
		$res => \@fs,
		$reu => \@fu,
		$rec => \@fc);
	if (@fu) {
		if (@fu == 1) {
			if (@fv) {
				push(@fa, @fu);
			} else {
				push(@fv, @fu);
			}
		} else {
			if (!@fv && !@fa) {
				for my $u (@fu) {
					if ($u->[0] =~ /\.mp4/) {
						push(@fv, $u);
					} else {
						push(@fa, $u);
					}
				}
			} elsif (@fv) {
				push(@fa, @fu);
			} else {
				print STDERR "Can't tell if these files are audio or video files:\n",
					join("\n", @fu),
					"\n";
			}
		}
	}

	if (!@fv) {
		print STDERR "did not find adequate video stream file for $f in $dirname\n";
		next;
	}
	print add_prefix_n("Video: ", map {$_->[0]} @fv);
	if (!@fa) {
		print STDERR "did not find adequate audio stream file for $f in $dirname\n";
		next;
	}
	print add_prefix_n("Audio: ", map {$_->[0]} @fa);
	print add_prefix_n("Subtitle: ", map {$_->[0]} @fs);
	print add_prefix_n("Chapters: ", map {$_->[0]} @fc);
	for my $fv (@fv) {
		my $fffileidx=0;
		my @cmd_fv = ("avconv", "-hide_banner", "-i", $fv->[0]);
		my @cmd_fa = ();
		my @cmd_fs = ();
		my @cmd_fc = ();
		my @cmd_maps = ('-map', $fffileidx++);
		my @la = ();
		my @ls = ();
		my $b = $fb;
		my @fb = split(/ - /, $fb);
		my @files = ($fv->[0]);
		for my $fa (@fa) {
			my $extra = $fa->[1];
			$extra =~ s/^\s+//;
			$extra =~ s/\s+$//;
			if ($extra =~ /^[a-z]+$/) {
				if (@fb) {
					$fb[@fb-1] =~ s/\b{wb}\Q$extra\E\b{wb}\s?//;
				}
				push(@la, $extra);
			}
			push (@cmd_fa, "-i", $fa->[0]);
			push(@cmd_maps, '-map', $fffileidx++);
			push(@files, $fa->[0]);
		}
		for my $fs (@fs) {
			my $extra = $fs->[1];
			$extra =~ s/^\s+//;
			$extra =~ s/\s+$//;
			if ($extra =~ /^[a-z]+$/) {
				push(@ls, $extra);
			}
			push (@cmd_fs, "-i", $fs->[0]);
			push(@cmd_maps, '-map', $fffileidx++);
			push(@files, $fs->[0]);
		}
		if (@fc) {
			push (@cmd_fc, "-i", $fc[0][0]);
			push(@cmd_maps, '-map', $fffileidx++);
		}
		if (@fb)
			{ $b = join(' - ', @fb); };
		if (@la)
			{ $b = $b . " " . join(',', @la); }
		if (@ls)
			{ $b = $b . " st=" . join(',', @ls); }
		if (defined $fv->[1] && $fv->[1] ne "")
			{ $b = "$b $fv->[1]"; }
		$b =~ s/  / /g;
		$b =~ s/\s+$//g;
		my $fv_name = "$b.mkv";
		if (defined $fe && $fe eq "mkv")
			{ $fv_name .= ".mkv"; }
		my @cmd = (@cmd_fv, @cmd_fa, @cmd_fs, @cmd_fc, '-c', 'copy', @cmd_maps, $fv_name);
		print join(' ', @cmd), "\n";

		if (!$noop && !system{$cmd[0]}(@cmd)) {
			for my $f (@files)
				{ $unlink{$f} = 1; }
			} else {
				for my $f (@files)
					{ $unlink{$f} = $notunlink{$f} = 1; }
		}
	}
	if (!$noop && !$keepfiles) {
		for my $df (keys %unlink) {
			if ($notunlink{$df}) {
				print "keeping $df because of transcoding error\n";
			} else {
				print "rm $df\n";
				unlink($df);
			}
		}
	}
}
