#!/usr/bin/perl -C255
use utf8;
use warnings;
use strict;
use Data::Dumper;
use Getopt::Long qw(:config bundling);

my $do_playlist = 0;
my $split_chapters = 0;
my $dummy_run = 0;
my $dl_mode = 'v';
my $subtitles_lvl = 1;

sub help()
{
	print <<EOF;
$0 [options] file_prefix [file_prefix] ...

file_prefix: Name of the file to be merged
             (an extension is automatically removed)

Options:
  -h --help       This text
  -L --list       Get the entries from the playlist
  -A --audio      Audio download mode
  -V --video      Video download mode (default)
  -C --split-chapters
                  Split by chapters
  -s --subtitles <n>
                  n=0: No subtitles
                  n=1: Normal subtitles only (default)
                  n=2: sutomatic subtitles, too
  -D --dummy		Don't actually execute the commands

EOF
}

GetOptions(
	"h|help"     => \&help,
	"A|audio" => sub{$dl_mode = 'a';},
	"V|video" => sub{$dl_mode = 'v';},
	"C|split-chapters"
	          => \$split_chapters,
	"s|subtitles=i"
	          => \$subtitles_lvl,
	"L|list"  => \$do_playlist,
	"D|dummy" => \$dummy_run,
);


#use BE::mov::Languages;
#my %Languages = %BE::mov::Languages::Languages;

#use BE::Dir;
#use BE::Filter;
#use BE::GenRE;
#use Safe;
#use File::Temp qw( );
#use Getopt::Long qw(:config bundling);

use JSON;
my $JSON = JSON->new->utf8;

sub  quoteShell(@)
{
	my @ret;
	map { (my $x = $_) =~ s/\'/\'\\\'\'/; push @ret, "'$x'"; } @_;
	return @ret if wantarray;
	return $ret[0];
}

sub better_codec_1080($$)
# no vp9 support on many devices
# 1 = new is better, -1 == old is better, 0 == unknown
{
	my ($old, $new) = @_;
	return 1 if !defined $old;
	$old =~ s/\..*//;
	$new =~ s/\..*//;
	return 0 if $old eq $new;
	return -1 if $new eq "vp09";
	return 1 if $new eq "avc1"; #h264
	return -1 if $old eq "avc1"; #h264
	return 0;
}

sub better_codec($$$)
# 1 = new is better, -1 == old is better, 0 == unknown
{
	my ($old, $new, $height) = @_;
	return better_codec_1080($old, $new) if $height <= 1080;
	$old =~ s/\..*//;
	$new =~ s/\..*//;
	return 0 if $old eq $new;
	return 1 if $new eq "vp09";
	return -1 if $old eq "vp09";
	return 1 if $new eq "avc1"; #h264
	return -1 if $old eq "avc1"; #h264
	return 0;
}

sub json_formats_a($;$);
sub json_formats_v($;@);

sub json_formats_v($;@) {
	my ($data, $iteration, $auto, $best_aac, $best_aac_drc, $best_opus, $best_combined) = @_;
	$iteration = $iteration || 0;
	$auto = [];
	my $best_video;
	my $video_1440p;
	my $video_1080p;
	my $do_no_size = 1;

	for my $format (@$data) {
		#print Data::Dumper->Dump([$format], ["format"]),"\n";# if $format->{format} =~ /233/;
		my $name = $format->{format_note};

		next if defined $name && $name eq 'storyboard';


		my $language = $format->{language};
		my $format_id = $format->{format_id};
		my $acodec = $format->{acodec};
		$acodec = undef if !defined $acodec || $acodec eq 'none';
		if (!defined $acodec
		&&  $format->{format} =~ /^\d+ - audio only\b/) {
			$acodec = $format->{ext}? "$format->{ext}a" : "mp4a";
		} # just a hack-y guess

		my $vcodec = $format->{vcodec};
		$vcodec = undef if !defined $vcodec || $vcodec eq 'none';
		my $br = $format->{vbr} || $format->{tbr};
		my $size = $format->{filesize};
		my $h = $format->{height};
		my $w = $format->{width};
		#print "here $format->{format}\n";
		if (!defined $acodec) {
			next if !defined $vcodec;
			$name = "4k" if $w == 3840;
			if (!defined $name || $name eq "DASH video" || $name eq "IOS") {
				$name = "$h"."p";
			}
			my $v = {
				h => $h,
				w => $w,
				br => $br,
				name => $name,
				language => $language,
				size => $size,
				format_id => $format_id,
				video_ext => $format->{video_ext},
				vcodec => $vcodec,
			};
			#print Data::Dumper->Dump([$v], ["vcodec"]),"\n";

			#Skip entries without file size on the first run
			if (!$size && !$do_no_size) {
				print "no size for $name $vcodec $hÃ—$w\@$br\n";
				next;
			}

			my $better = 1;
			$better = better_codec($best_video->{vcodec}, $vcodec, $h);
			if (!defined $best_video || !(1*%$best_video)
			|| $best_video->{h} < $h
			||     $best_video->{h} == $h
			   && ($better > 0
			   ||    $better == 0
			      && $best_video->{size} < $size)) {
				$best_video = $v;
			}
			if ($h == 1440 && (
				   !defined $video_1440p
				|| $video_1440p->{size} < $size
			)) {
				$video_1440p = $v;
			}
			if ($h == 1080) {
				if (!defined $video_1080p) {
					$video_1080p  = $v;
				} else {
					$better = better_codec_1080($video_1080p->{vcodec}, $vcodec);
				   if ($better > 0
				   || $better == 0 && $video_1080p->{size} < $size) {
				   	$video_1080p  = $v;
				   }
				}
			}
		} else { # now $acodec is set
			#print Data::Dumper->Dump([$format], ["format (acodec)"]),"\n";
			if (!defined $vcodec) {
				next;
				# this is an audio only stream
				# The following is redundant now, will be removed
				$size = 0 if !defined $size;
				next if !$size && !$do_no_size;
				my $a = {
					br => $br,
					name => $name,
					language => $language,
					size => $size,
					format_id => $format_id,
					audio_ext => $format->{audio_ext},
					acodec => $acodec,
				};
				if ($acodec eq "opus") {
					if (!defined $best_opus
					|| $best_opus->{size} <= $size) {
						$best_opus = $a;
					}
				} elsif ($acodec =~ /^mp4a/) {
					if ($format_id =~ /-drc$/) {
						if (!defined $best_aac_drc
						|| $best_aac_drc->{size} <= $size) {
							$best_aac_drc = $a;
						}
					} else {
						if (!defined $best_aac
						|| $best_aac->{size} <= $size) {
							$best_aac = $a;
						}
					}
				} else {
					print "ignoring acodec $acodec\n";
					print Data::Dumper->Dump([$format], ["format"]);
				}
			} else {
				# now $vcodec and $acodec is set
				$name = "4k" if $w == 3840;
				die if !defined $h;
				my $av = {
					h => $h,
					w => $w,
					br => $br,
					name => $name,
					size => $size,
					format_id => $format_id,
					video_ext => $format->{video_ext},
					vcodec => $vcodec,
					audio_ext => $format->{audio_ext},
					acodec => $acodec,
				};
				my $better = better_codec_1080($best_combined->{vcodec}, $vcodec);
				if (!defined $best_combined || !(1*%$best_combined)
				|| $best_combined->{h} < $h
				|| $better > 0
				|| $better == 0 && $best_combined->{size} < $size) {
					$best_combined = $av;
				}
			}
		}
	}
	if ($best_combined) {
		if (!defined $best_video
		|| $best_video->{h} <= $best_combined->{h}) {
			push(@$auto, $best_combined);
			goto done;
		}
	}
	if (!defined $best_video) {
		print "no good video found\n" if $do_no_size; # only print on second run
		return undef unless wantarray;
		return ();
	}
	# $best_combined is not the best download
	my $h = $best_video->{h};
	my ($doaac, $doopus);
	push(@$auto, $best_video);
	if ($h > 1080) {
		$doopus = 1;
		if ($h > 1440) {
			if ($video_1440p) {
				push(@$auto, $video_1440p);
			} elsif ($video_1080p){
				push(@$auto, $video_1080p);
				$doaac = 1;
			} elsif ($best_combined) {
				push(@$auto, $best_combined);
			}
		}
	} else { # now $h <= 1080
		$doaac = 1;
	}
	if ($doopus) {
		if ($best_opus) {
			push(@$auto, $best_opus)
		} else {
			$doaac = 1;
		}
	}
	if ($doaac) {
		push(@$auto, $best_aac) if $best_aac;
		push(@$auto, $best_aac_drc) if $best_aac_drc;
	}
	done:
	print Data::Dumper->Dump([$best_aac, $best_aac_drc, $best_opus, $best_video, $video_1440p, $video_1080p, $best_combined, $auto],
		[qw(best_aac best_aac_drc best_opus best_video video_1440p video_1080p best_combined auto)]) if 0;
	return $auto unless wantarray;
	return ($auto, $best_aac, $best_aac_drc, $best_opus, $best_video, $video_1440p, $video_1080p, $best_combined);
}

sub better_acodec($$);
sub better_acodec($$) {
	my ($old, $new) = @_;
	return $new if !defined $old || !defined $old->{format_id};

	$old->{format_id} =~ /(\d+)/;
	my $oid = $1;
	$new->{format_id} =~ /(\d+)/;
	my $nid = $1;
	return $old if $oid > $nid;
	return $new if $nid > $oid;

	# now both are equal
	if (!defined $old->{languages}) {
		$old->{languages}{$old->{language}} = $old;
	}
	$old->{languages}{$new->{language}} = $new;
	return $old;
}

sub json_formats_a($;$) {
	my $data = shift;
	my $iteration = shift || 0;
	my $best_aac;
	my $best_aac_drc;
	my $best_opus;
	my $best_combined;

	#print "Iteration $iteration\n";

	# iterations:
	# 0: Only opus with known size
	# 1: Only opus
	# 2: Any w/o video with known size
	# 3: Any w/o video
	# 4: Any with known size
	# 5: Any

	for my $format (@$data) {
		my $name = $format->{format_note};
		next if defined $name && $name eq 'storyboard';
		my $language = $format->{language};
		my $format_id = $format->{format_id};
		my $acodec = $format->{acodec};
		if (!defined $acodec) {
			if (defined $format->{audio_ext}
			&& $format->{audio_ext} ne 'none') {
				$acodec = 'unknown';
			}
		} elsif ($acodec eq 'none') {
			$acodec = undef;
		}
		next if !defined $acodec;
		my $vcodec = $format->{vcodec};
		$vcodec = undef if !defined $vcodec || $vcodec eq 'none';
		my $br = $format->{vbr} || $format->{tbr};
		my $size = $format->{filesize};
		$size = 0 if !defined $size;
		my $sp = $format->{source_preference} || 0;
		my $h = $format->{height};
		my $w = $format->{width};

		my $pvcodec = $vcodec || "()";
		my $psize = defined $size? $size : -1;

		#print "###\n$format_id ac=$acodec ae=$format->{audio_ext} vc=$pvcodec $psize\n###\n";
		#print Data::Dumper->Dump([$format]);

		# now $acodec is set
		if (!defined $vcodec) {
			# this is an audio only stream

			next if !$size && ! ($iteration & 1);
			# look for size on iterations 0,2,4

			my $a = {
				br => $br,
				name => $name,
				language => $language,
				size => $size,
				format_id => $format_id,
				audio_ext => $format->{audio_ext},
				acodec => $acodec,
				source_preference => $sp,
			};
			if ($acodec eq "opus") {
				$best_opus = better_acodec($best_opus, $a);
			} elsif ($iteration < 2) {
				next;
			} elsif ($acodec =~ /^mp4a/) {
				if ($format_id =~ /-drc$/) {
					$best_aac_drc = better_acodec($best_aac_drc, $a);
				} else {
					$best_aac = better_acodec($best_aac, $a);
				}
			} elsif ($acodec eq "unknown" && $iteration >1) {
				$best_aac = better_acodec($best_aac, $a);
			} else {
				#print Data::Dumper->Dump([$format], ["format"]);
				#print("################################################################\n");
			}
		} else {
			next if $iteration < 4;
			# no video download if there are audio downloads
			next if !$size && ! ($iteration & 1);
			# look for size on iterations 0,2,4

			# now $vcodec and $acodec is set

			$name = "4k" if $w == 3840;
			die if !defined $h;
			my $av = {
				h => $h,
				w => $w,
				br => $br,
				name => $name,
				size => $size,
				format_id => $format_id,
				video_ext => $format->{video_ext},
				vcodec => $vcodec,
				audio_ext => $format->{audio_ext},
				acodec => $acodec,
			};
			my $better = better_codec_1080($best_combined->{vcodec}, $vcodec);
			if (!defined $best_combined || !(1*%$best_combined)
			|| $best_combined->{h} < $h
			|| $better > 0
			|| $better == 0 && $best_combined->{size} < $size) {
				$best_combined = $av;
			}
		}
	}
	my $auto =[];
	if ($best_opus) {
		push(@$auto, $best_opus);
		goto done;
	}
	if ($best_aac) {
		push(@$auto, $best_aac);
		goto done;
	}
	if ($best_aac_drc) {
		push(@$auto, $best_aac_drc);
		goto done;
	}
	if ($best_combined) {
		push(@$auto, $best_combined);
		goto done;
	}
	done:

	return json_formats_a($data, $iteration + 1) if !(1*@$auto) && ($iteration < 6);
	# next iteration if we found nothing


	print Data::Dumper->Dump([$best_aac, $best_aac_drc, $best_opus, $best_combined, $auto],
		[qw(best_aac best_aac_drc best_opus best_combined auto)]) if 0;
	#die;

	return $auto unless wantarray;
	return ($auto, $best_aac, $best_aac_drc, $best_opus, $best_combined);
}

sub dl_file_cmd($$)
{
	my ($file, $url) = @_;
	return ($file => ["wget", "-O", $file, $url]);
}

sub write_captions($$)
{
	my ($fprefix, $c) = @_;
	for my $ext (qw(srt vtt ttml json3 srv3 srv2 srv1)) {
		for my $x (@$c) {
			if ($x->{ext} eq $ext) {
				return dl_file_cmd("$fprefix.$ext", $x->{url});
			}
		}
	}
	return ();
}

sub download_cmds($$) {
	my %cmds = ();
	my ($d, $v) = @_;
	if (defined $d->{languages}) {
		my $languages = delete($d->{languages});
		for my $k (keys %$languages) {
			my %t = download_cmds($languages->{$k}, $v);
			@cmds{keys %t} = values %t;
		}
		return %cmds;
	}
	my $ext = $d->{video_ext};
	my $suffix = "";
	if ($d->{vcodec}) {
		$suffix = length($d->{name})? " - $d->{name}"
				  : length($d->{language})? " - $d->{language}"
				  : "";
	} elsif ($d->{acodec}) {
		$suffix = length($d->{language})? " - $d->{language}"
				  : length($d->{name})? " - $d->{name}"
				  : "";
	}
	$ext = $d->{audio_ext} if !defined $ext;
	$ext .= "v" unless defined $d->{acodec};
	$ext .= "a" unless defined $d->{vcodec} || $ext eq "m4a";
	my @ext_audio_arg;
	$ext_audio_arg[0] = '-x' if $dl_mode eq 'a';
	my @split_chapter_arg ;
	$split_chapter_arg[0] = '--split-chapters' if $split_chapters;
	my $cmd = ["yt-dlp", "--output", "$v->{title}$suffix.$ext", "-f", $d->{format_id}, @split_chapter_arg, @ext_audio_arg, "--no-playlist", $v->{data}->{webpage_url}];
	if ($v->{json_fn}) {
		$cmd = ["yt-dlp", "--output", "$v->{title}$suffix.$ext", "-f", $d->{format_id}, @split_chapter_arg, @ext_audio_arg, "--no-playlist", "--load-info-json", $v->{json_fn}];
	}
	$cmds{"$v->{title}$suffix.$ext"} = $cmd;
	return %cmds;
}

sub json_doDownload($)
{
	my $data = shift;

	# we might get an empty entry. These will be handled here.
	return if ! defined $data;
	return if ! 1*%$data;

	# If we have a not-part-of-a-list data object, it will have _json
	# set to the original text. Otherwise we need to encode the data
	# to JSON again
	my $json = $data->{_json};
	if (!defined $json) {
		$json = $JSON->encode($data);
	}
	my $title = $data->{title};
	$title = $data->{fulltitle} if defined $data->{fulltitle};

	my $cmds = {};
	my $cmds2 = [];

	if (defined (my $channel = $data->{channel})) {
		$title =~ s/ - / -- /g;
		$title = "$channel - $title";
	}
	$title =~ s/^\.+//;
	$title =~ s,/,-,g;
	print "$title $data->{webpage_url}\n";

	my @downloads = json_formats_a($data->{formats});
	my $downloads = $downloads[0];
	if ($dl_mode eq 'v') {
		$downloads = json_formats_v($data->{formats}, 0, @downloads);
		if (!defined $downloads || !@$downloads) { $downloads = json_formats_v($data->{formats}, 1, @downloads);};
	}

	my $json_fn = "$title.json";
	if (open(my $fd, '>', $json_fn)) {
		print $fd $json;
		close($fd);
		print "wrote JSON to '$json_fn'\n";
	} else { $json_fn = undef; }

	for my $d (@$downloads) {
		my %t = download_cmds($d, {title => $title, json_fn => $json_fn, data => $data});
		@$cmds{keys %t} = values %t;
	}
	if (open(my $fd, '>', "$title.txt")) {
		print $fd "Title: $title\n".
			"URL: $data->{webpage_url}\n\n";
		print $fd $data->{description};
		close($fd);
		print "wrote description to '$title.txt'\n";
	} else {
		print STDERR "Can't write description to '$title.txt'\n"
	}
	if (defined $data->{chapters} && 1*@{$data->{chapters}}) {
		if (open(my $fd, '>', "$title.chapters")) {
			for my $c (@{$data->{chapters}}) {
				print $fd <<EOF;
[CHAPTER]
TIMEBASE=1/1000
START=$c->{start_time}
END=$c->{end_time}
title=$c->{title}

EOF
			}
			close($fd);
			print "wrote chapters to '$title.chapters'\n";
		} else {
			print STDERR "Can't write chapters to '$title.chapters'\n"
		}
	} else {
		print "No chapters to write\n";
	}

	my %normal_subtitles = ();

	if ($subtitles_lvl > 0 && defined $data->{subtitles} && 1*%{$data->{subtitles}}) {
		my $sts = $data->{subtitles};
		for my $st (keys %$sts) {
			my @cmd = write_captions("$title - $st", $sts->{$st});
			if (@cmd) {
				$cmds->{$cmd[0]} = $cmd[1];
				$normal_subtitles{$st} = 1;
			}
		}
	}

	if ($subtitles_lvl > 1 && defined $data->{automatic_captions}) {
		my $sts = $data->{automatic_captions};
		for my $st (keys %$sts) {
			next if $normal_subtitles{$st};
			my @cmd = write_captions("$title - $st", $sts->{$st});
			if (@cmd) {
				$cmds->{$cmd[0]} = $cmd[1];
			}
		}
	}

	if (defined $json_fn) {
		my $cmd = ["/bin/rm", "-f", $json_fn ];
		push @$cmds2, $cmd;
	}

	my $tnurl;
	if (defined $data->{thumbnail}) {
		$tnurl = $data->{thumbnail};
	} elsif (defined $data->{thumbnails} && 1*@{$data->{thumbnails}}) {
		my $tns = $data->{thumbnails};
		my $tn = shift @$tns;
		while (defined (my $t = shift @$tns)) {
			if ($t->{preference} > $tn->{preference}) {
				$tn = $t;
			}
		}
		if ($tn) {
			$tnurl = $tn->{url};
		}
	}
	if (defined $tnurl) {
		$tnurl =~ /\.[^.]+$/;
		my $ext = $&;
		if (!defined $ext) {
			$ext = ".unknown_picture";
		}
		$ext =~ s/\?.*//;
		my @cmd = dl_file_cmd("$title$ext", $tnurl);
		$cmds->{$cmd[0]}  = $cmd[1];
	}

	my @skipped;
	print "\nPreview:\n";
	for my $k (keys %$cmds) {
		if (-e $k) {
			print "test -e ".quoteShell($k)."\n";
			push(@skipped, $k);
		} else {
			print(join(' ', quoteShell(@{$cmds->{$k}})),"\n");
		}
	}
	for my $c (@$cmds2) {
		print(join(' ', quoteShell(@$c)),"\n");
	}
	if (!$dummy_run) {
		my @failed;
		my @newfiles;
		print "\nRun:\n";
		for my $k (keys %$cmds) {
			if (! -e $k) {
				print(join(' ', quoteShell(@{$cmds->{$k}})),"\n");
				my $ret = system(@{$cmds->{$k}});
				if ($ret) {
					print "Downloading ".quoteShell($k)." failed, removing\n";
					unlink($k);
					push(@failed, $k);
				} else {
					push(@newfiles, $k);
				}
				sleep(1);
			}
		}
		for my $c (@$cmds2) {
			print(join(' ', quoteShell(@$c)),"\n");
			system(@$c);
		}
		if (1*@skipped) {
			print("\nSkipped files:\n",
				join("\n", quoteShell(@skipped)),
				"\n");
		}
		if (1*@newfiles) {
			print("\nNew files:\n",
				join("\n", quoteShell(@newfiles)),
				"\n");
		}
		if (1*@failed) {
			print("\nFailed files:\n",
				join("\n", quoteShell(@failed)),
				"\n");
		}
		print("\n");
	};
}

sub json_playlist($)
{
	my $data = shift;
	for my $entry (@{$data->{entries}}) {
		json_doDownload($entry);
	}
}


for my $f (@ARGV) {
	my $vdatafd;
	if ($f =~ /^json:(.*)/) {
		if (!open($vdatafd, "<", $1)) {
			print STDERR "Can't open $f for reading: $!\n";
			next;
		}
	} elsif ($do_playlist) {
		if (!open($vdatafd, "-|", qw(yt-dlp -J --verbose --quiet -t sleep), $f)) {
			# --verbose --quiet makes yt-dlp output the messages to stderr
			print STDERR "Can't fork while reading video data for $f\n";
			next;
		}
	} else {
		if (!open($vdatafd, "-|", qw(yt-dlp -J --no-playlist --verbose --quiet -t sleep), $f)) {
			# --verbose --quiet makes yt-dlp output the messages to stderr
			print STDERR "Can't fork while reading video data for $f\n";
			next;
		}
	};
	my $json = <$vdatafd>;
	close($vdatafd);

	my $data = $JSON->decode($json);
	$data->{_json} = $json;
	if (!$data) {
		print STDERR "error getting video data\n";
		next;
	}
	if ($data->{_type} eq "playlist") {
		json_playlist($data);
	} elsif ($data->{_type} eq "video") {
		json_doDownload($data);
	} else {
		print STDERR "Got data type $data->{_type}, please program something to deal with that\n";
	}
}
